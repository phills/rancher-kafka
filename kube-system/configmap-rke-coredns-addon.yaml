apiVersion: v1
data:
  rke-coredns-addon: "\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name:
    coredns\n  namespace: kube-system\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind:
    ClusterRole\nmetadata:\n  labels:\n    kubernetes.io/bootstrapping: rbac-defaults\n
    \ name: system:coredns\nrules:\n- apiGroups:\n  - \"\"\n  resources:\n  - endpoints\n
    \ - services\n  - pods\n  - namespaces\n  verbs:\n  - list\n  - watch\n- apiGroups:\n
    \ - \"\"\n  resources:\n  - nodes\n  verbs:\n  - get\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind:
    ClusterRoleBinding\nmetadata:\n  annotations:\n    rbac.authorization.kubernetes.io/autoupdate:
    \"true\"\n  labels:\n    kubernetes.io/bootstrapping: rbac-defaults\n  name: system:coredns\nroleRef:\n
    \ apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: system:coredns\nsubjects:\n-
    kind: ServiceAccount\n  name: coredns\n  namespace: kube-system\n---\napiVersion:
    v1\nkind: ConfigMap\nmetadata:\n  name: coredns\n  namespace: kube-system\ndata:\n
    \ Corefile: |\n    .:53 {\n        errors\n        health {\n          lameduck
    5s\n        }\n        ready\n        kubernetes cluster.local in-addr.arpa ip6.arpa
    {\n          pods insecure\n          fallthrough in-addr.arpa ip6.arpa\n        }\n
    \       prometheus :9153\n        forward . \"/etc/resolv.conf\"\n        cache
    30\n        loop\n        reload\n        loadbalance\n    }\n---\napiVersion:
    apps/v1\nkind: Deployment\nmetadata:\n  name: coredns\n  namespace: kube-system\n
    \ labels:\n    k8s-app: kube-dns\n    kubernetes.io/name: \"CoreDNS\"\nspec:\n
    \ replicas: 1\n  strategy:\n\n    rollingUpdate:\n      maxSurge: 0\n      maxUnavailable:
    1\n    type: RollingUpdate\n\n  selector:\n    matchLabels:\n      k8s-app: kube-dns\n
    \ template:\n    metadata:\n      labels:\n        k8s-app: kube-dns\n      annotations:\n
    \       seccomp.security.alpha.kubernetes.io/pod: 'docker/default'\n    spec:\n
    \     priorityClassName: system-cluster-critical\n      serviceAccountName: coredns\n
    \     tolerations:\n        - key: \"CriticalAddonsOnly\"\n          operator:
    \"Exists\"\n        - effect: NoExecute\n          operator: Exists\n        -
    effect: NoSchedule\n          operator: Exists\n      nodeSelector:\n        beta.kubernetes.io/os:
    linux\n      \n      affinity:\n        nodeAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n
    \           nodeSelectorTerms:\n              - matchExpressions:\n                -
    key: node-role.kubernetes.io/worker\n                  operator: Exists\n        podAntiAffinity:\n
    \         requiredDuringSchedulingIgnoredDuringExecution:\n            - labelSelector:\n
    \               matchExpressions:\n                - key: k8s-app\n                  operator:
    In\n                  values: [\"kube-dns\"]\n              topologyKey: kubernetes.io/hostname\n
    \     containers:\n      - name: coredns\n        image: rancher/coredns-coredns:1.6.5\n
    \       imagePullPolicy: IfNotPresent\n        resources:\n          limits:\n
    \           memory: 170Mi\n          requests:\n            cpu: 100m\n            memory:
    70Mi\n        args: [ \"-conf\", \"/etc/coredns/Corefile\" ]\n        volumeMounts:\n
    \       - name: config-volume\n          mountPath: /etc/coredns\n          readOnly:
    true\n        ports:\n        - containerPort: 53\n          name: dns\n          protocol:
    UDP\n        - containerPort: 53\n          name: dns-tcp\n          protocol:
    TCP\n        - containerPort: 9153\n          name: metrics\n          protocol:
    TCP\n        livenessProbe:\n          httpGet:\n            path: /health\n            port:
    8080\n            scheme: HTTP\n          initialDelaySeconds: 60\n          timeoutSeconds:
    5\n          successThreshold: 1\n          failureThreshold: 5\n        readinessProbe:\n
    \         httpGet:\n            path: /ready\n            port: 8181\n            scheme:
    HTTP\n        securityContext:\n          allowPrivilegeEscalation: false\n          capabilities:\n
    \           add:\n            - NET_BIND_SERVICE\n            drop:\n            -
    all\n          readOnlyRootFilesystem: true\n      dnsPolicy: Default\n      volumes:\n
    \       - name: config-volume\n          configMap:\n            name: coredns\n
    \           items:\n            - key: Corefile\n              path: Corefile\n---\napiVersion:
    v1\nkind: Service\nmetadata:\n  name: kube-dns\n  namespace: kube-system\n  annotations:\n
    \   prometheus.io/port: \"9153\"\n    prometheus.io/scrape: \"true\"\n  labels:\n
    \   k8s-app: kube-dns\n    kubernetes.io/cluster-service: \"true\"\n    kubernetes.io/name:
    \"CoreDNS\"\nspec:\n  selector:\n    k8s-app: kube-dns\n  clusterIP: 10.43.0.10\n
    \ ports:\n  - name: dns\n    port: 53\n    protocol: UDP\n  - name: dns-tcp\n
    \   port: 53\n    protocol: TCP\n  - name: metrics\n    port: 9153\n    protocol:
    TCP\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: coredns-autoscaler\n
    \ namespace: kube-system\n  labels:\n    k8s-app: coredns-autoscaler\nspec:\n
    \ selector:\n    matchLabels:\n      k8s-app: coredns-autoscaler\n  template:\n
    \   metadata:\n      labels:\n        k8s-app: coredns-autoscaler\n    spec:\n
    \     serviceAccountName: coredns-autoscaler\n      nodeSelector:\n        beta.kubernetes.io/os:
    linux\n      affinity:\n        nodeAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n
    \           nodeSelectorTerms:\n              - matchExpressions:\n                -
    key: node-role.kubernetes.io/worker\n                  operator: Exists\n      tolerations:\n
    \     - effect: NoExecute\n        operator: Exists\n      - effect: NoSchedule\n
    \       operator: Exists\n      containers:\n      - name: autoscaler\n        image:
    rancher/cluster-proportional-autoscaler:1.7.1\n        resources:\n            requests:\n
    \               cpu: \"20m\"\n                memory: \"10Mi\"\n        command:\n
    \         - /cluster-proportional-autoscaler\n          - --namespace=kube-system\n
    \         - --configmap=coredns-autoscaler\n          - --target=Deployment/coredns\n
    \         # When cluster is using large nodes(with more cores), \"coresPerReplica\"
    should dominate.\n          # If using small nodes, \"nodesPerReplica\" should
    dominate.\n\n          - --default-params={\"linear\":{\"coresPerReplica\":128,\"nodesPerReplica\":4,\"min\":1,\"preventSinglePointFailure\":true}}\n\n
    \         - --nodelabels=node-role.kubernetes.io/worker=true,beta.kubernetes.io/os=linux\n
    \         - --logtostderr=true\n          - --v=2\n---\napiVersion: v1\nkind:
    ServiceAccount\nmetadata:\n  name: coredns-autoscaler\n  namespace: kube-system\n---\nkind:
    ClusterRole\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: system:coredns-autoscaler\nrules:\n
    \ - apiGroups: [\"\"]\n    resources: [\"nodes\"]\n    verbs: [\"list\", \"watch\"]\n
    \ - apiGroups: [\"\"]\n    resources: [\"replicationcontrollers/scale\"]\n    verbs:
    [\"get\", \"update\"]\n  - apiGroups: [\"extensions\",\"apps\"]\n    resources:
    [\"deployments/scale\", \"replicasets/scale\"]\n    verbs: [\"get\", \"update\"]\n
    \ - apiGroups: [\"\"]\n    resources: [\"configmaps\"]\n    verbs: [\"get\", \"create\"]\n---\nkind:
    ClusterRoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name:
    system:coredns-autoscaler\nsubjects:\n  - kind: ServiceAccount\n    name: coredns-autoscaler\n
    \   namespace: kube-system\nroleRef:\n  kind: ClusterRole\n  name: system:coredns-autoscaler\n
    \ apiGroup: rbac.authorization.k8s.io"
kind: ConfigMap
metadata:
  creationTimestamp: "2020-04-02T04:33:42Z"
  name: rke-coredns-addon
  namespace: kube-system
